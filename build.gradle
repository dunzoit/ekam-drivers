plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {
    // google
    implementation('com.google.guava:guava:28.0-jre')
    implementation('com.google.code.gson:gson:2.8.0')

    //apache
    implementation('org.apache.commons:commons-lang3:3.1')

    //generic wait
    implementation('org.awaitility:awaitility:4.0.3')

    //retrofit
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')

    //appium
    implementation('io.appium:java-client:7.5.1')

    //Selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')
    implementation('io.github.bonigarcia:webdrivermanager:4.0.0')

    //Selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')
    implementation('io.github.bonigarcia:webdrivermanager:4.0.0')

    //lombok
    implementation('org.projectlombok:lombok:1.18.12')
    annotationProcessor('org.projectlombok:lombok:1.18.12')
    testImplementation('org.projectlombok:lombok:1.18.12')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.12')

    // testvagrant
    implementation('com.testvagrant.ekam:ekam-api:0.0.2-alpha')

    //guice
    implementation('com.google.inject:guice:4.2.3')

    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation('org.testng:testng:6.14.3')
}

test {
    // Use TestNG for unit tests
    useTestNG()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.testvagrant.optimus'
            artifactId 'optimus-lite'
            version '0.1.5-beta'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Optimus Lite API to manage test devices and create appium driver based on platform'
            name 'Optimus Lite'
            url 'https://gitlab.com/testvagrant/automation-platform/optimus-lite'
            organization {
                name 'com.testvagrant.optimus'
                url 'https://gitlab.com/testvagrant/automation-platform'
            }
            issueManagement {
                system 'GitLab'
                url 'https://gitlab.com/testvagrant/automation-platform/optimus-lite/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://gitlab.com/testvagrant/automation-platform/optimus-lite/-/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://gitlab.com/testvagrant/automation-platform/optimus-lite'
                connection 'https://gitlab.com/testvagrant/automation-platform/optimus-lite.git'
                developerConnection 'git@gitlab.com:testvagrant/automation-platform/optimus-lite.git'
            }
            developers {
                developer {
                    name 'Sudarshan GS'
                }
                developer {
                    name 'Krishnanand B'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}


signing {
    sign publishing.publications
}
